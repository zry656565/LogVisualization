/* Generated By:JavaCC: Do not edit this line. SQLParserConstants.java */
package com.LogVisualization.Parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface SQLParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LINE_COMMENT = 4;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 5;
  /** RegularExpression Id. */
  int AND = 6;
  /** RegularExpression Id. */
  int AS = 7;
  /** RegularExpression Id. */
  int ASC = 8;
  /** RegularExpression Id. */
  int AVG = 9;
  /** RegularExpression Id. */
  int BETWEEN = 10;
  /** RegularExpression Id. */
  int BY = 11;
  /** RegularExpression Id. */
  int COUNT = 12;
  /** RegularExpression Id. */
  int DESC = 13;
  /** RegularExpression Id. */
  int DISTINCT = 14;
  /** RegularExpression Id. */
  int FIRST = 15;
  /** RegularExpression Id. */
  int FROM = 16;
  /** RegularExpression Id. */
  int GROUP = 17;
  /** RegularExpression Id. */
  int HAVING = 18;
  /** RegularExpression Id. */
  int INNER = 19;
  /** RegularExpression Id. */
  int JOIN = 20;
  /** RegularExpression Id. */
  int LAST = 21;
  /** RegularExpression Id. */
  int LEFT = 22;
  /** RegularExpression Id. */
  int LIKE = 23;
  /** RegularExpression Id. */
  int MAX = 24;
  /** RegularExpression Id. */
  int MIN = 25;
  /** RegularExpression Id. */
  int NOT = 26;
  /** RegularExpression Id. */
  int OR = 27;
  /** RegularExpression Id. */
  int ORDER = 28;
  /** RegularExpression Id. */
  int SELECT = 29;
  /** RegularExpression Id. */
  int SUM = 30;
  /** RegularExpression Id. */
  int TOP = 31;
  /** RegularExpression Id. */
  int WHERE = 32;
  /** RegularExpression Id. */
  int CHARTTYPE = 33;
  /** RegularExpression Id. */
  int DATASOURCE = 34;
  /** RegularExpression Id. */
  int INDEX = 35;
  /** RegularExpression Id. */
  int EARLIEST = 36;
  /** RegularExpression Id. */
  int FIELDS = 37;
  /** RegularExpression Id. */
  int HELP = 38;
  /** RegularExpression Id. */
  int HOUR = 39;
  /** RegularExpression Id. */
  int LASTEST = 40;
  /** RegularExpression Id. */
  int LS = 41;
  /** RegularExpression Id. */
  int LOGIN = 42;
  /** RegularExpression Id. */
  int LOGOUT = 43;
  /** RegularExpression Id. */
  int Min = 44;
  /** RegularExpression Id. */
  int SEARCH = 45;
  /** RegularExpression Id. */
  int SEC = 46;
  /** RegularExpression Id. */
  int STATS = 47;
  /** RegularExpression Id. */
  int STEP = 48;
  /** RegularExpression Id. */
  int SET = 49;
  /** RegularExpression Id. */
  int X = 50;
  /** RegularExpression Id. */
  int Y = 51;
  /** RegularExpression Id. */
  int Z = 52;
  /** RegularExpression Id. */
  int JAN = 53;
  /** RegularExpression Id. */
  int FEB = 54;
  /** RegularExpression Id. */
  int MAR = 55;
  /** RegularExpression Id. */
  int APR = 56;
  /** RegularExpression Id. */
  int MAY = 57;
  /** RegularExpression Id. */
  int JUN = 58;
  /** RegularExpression Id. */
  int JUL = 59;
  /** RegularExpression Id. */
  int AUG = 60;
  /** RegularExpression Id. */
  int SEP = 61;
  /** RegularExpression Id. */
  int OCT = 62;
  /** RegularExpression Id. */
  int NOV = 63;
  /** RegularExpression Id. */
  int DEC = 64;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 65;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 66;
  /** RegularExpression Id. */
  int EXPONENT = 67;
  /** RegularExpression Id. */
  int STRING_LITERAL = 68;
  /** RegularExpression Id. */
  int ID = 69;
  /** RegularExpression Id. */
  int LETTER = 70;
  /** RegularExpression Id. */
  int DIGIT = 71;
  /** RegularExpression Id. */
  int COLON = 72;
  /** RegularExpression Id. */
  int COMMA = 73;
  /** RegularExpression Id. */
  int LESS = 74;
  /** RegularExpression Id. */
  int LESSEQUAL = 75;
  /** RegularExpression Id. */
  int GREATER = 76;
  /** RegularExpression Id. */
  int GREATEREQUAL = 77;
  /** RegularExpression Id. */
  int EQUAL = 78;
  /** RegularExpression Id. */
  int NOTEQUAL = 79;
  /** RegularExpression Id. */
  int OPENPAREN = 80;
  /** RegularExpression Id. */
  int CLOSEPAREN = 81;
  /** RegularExpression Id. */
  int ASTERISK = 82;
  /** RegularExpression Id. */
  int SLASH = 83;
  /** RegularExpression Id. */
  int PLUS = 84;
  /** RegularExpression Id. */
  int MINUS = 85;
  /** RegularExpression Id. */
  int QUESTIONMARK = 86;
  /** RegularExpression Id. */
  int LQUOTATION = 87;
  /** RegularExpression Id. */
  int EOL = 88;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "<LINE_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "\"and\"",
    "\"as\"",
    "\"asc\"",
    "\"avg\"",
    "\"between\"",
    "\"by\"",
    "\"count\"",
    "\"desc\"",
    "\"distinct\"",
    "\"first\"",
    "\"from\"",
    "\"group\"",
    "\"having\"",
    "\"inner\"",
    "\"join\"",
    "\"last\"",
    "\"left\"",
    "\"like\"",
    "\"MAX\"",
    "\"MIN\"",
    "\"not\"",
    "\"or\"",
    "\"order\"",
    "\"select\"",
    "\"sum\"",
    "\"top\"",
    "\"where\"",
    "\"charttype\"",
    "\"datasource\"",
    "\"index\"",
    "\"earlist\"",
    "\"fields\"",
    "\"help\"",
    "\"h\"",
    "\"latest\"",
    "\"ls\"",
    "\"login\"",
    "\"logout\"",
    "\"min\"",
    "\"search\"",
    "\"sec\"",
    "\"stats\"",
    "\"step\"",
    "\"set\"",
    "\"x\"",
    "\"y\"",
    "\"z\"",
    "\"Jan\"",
    "\"Feb\"",
    "\"Mar\"",
    "\"Apr\"",
    "\"May\"",
    "\"Jun\"",
    "\"Jul\"",
    "\"Aug\"",
    "\"Sep\"",
    "\"Oct\"",
    "\"Nov\"",
    "\"Dec\"",
    "<INTEGER_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<STRING_LITERAL>",
    "<ID>",
    "<LETTER>",
    "<DIGIT>",
    "\":\"",
    "\",\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"=\"",
    "\"!=\"",
    "\"(\"",
    "\")\"",
    "\"*\"",
    "\"/\"",
    "\"+\"",
    "\"-\"",
    "\"?\"",
    "\"\\\"\"",
    "\"\\n\"",
  };

}
