/* Generated By:JavaCC: Do not edit this line. SQLParserTokenManager.java */
package com.LogVisualization.Parser;

/** Token Manager. */
public class SQLParserTokenManager implements SQLParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x200000L) != 0L)
            return 0;
         if ((active1 & 0x80000L) != 0L)
            return 3;
         if ((active0 & 0x1c00c000040000L) != 0L)
            return 39;
         if ((active0 & 0xffe3ff3ffffbffc0L) != 0L || (active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 69;
            return 39;
         }
         return -1;
      case 1:
         if ((active0 & 0xffe3fd7fe7fff640L) != 0L || (active1 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 69;
               jjmatchedPos = 1;
            }
            return 39;
         }
         if ((active0 & 0x20018000980L) != 0L)
            return 39;
         return -1;
      case 2:
         if ((active0 & 0x1ad7f30fff400L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 69;
               jjmatchedPos = 2;
            }
            return 39;
         }
         if ((active0 & 0xffe25000c7000340L) != 0L || (active1 & 0x1L) != 0L)
            return 39;
         return -1;
      case 3:
         if ((active0 & 0x1004000f12000L) != 0L)
            return 39;
         if ((active0 & 0xad3f300ed400L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 3;
            return 39;
         }
         return -1;
      case 4:
         if ((active0 & 0x293620044400L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 4;
            return 39;
         }
         if ((active0 & 0x8409100a9000L) != 0L)
            return 39;
         return -1;
      case 5:
         if ((active0 & 0x1600004400L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 5;
            return 39;
         }
         if ((active0 & 0x292020040000L) != 0L)
            return 39;
         return -1;
      case 6:
         if ((active0 & 0x600004000L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 6;
            return 39;
         }
         if ((active0 & 0x1000000400L) != 0L)
            return 39;
         return -1;
      case 7:
         if ((active0 & 0x600000000L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 7;
            return 39;
         }
         if ((active0 & 0x4000L) != 0L)
            return 39;
         return -1;
      case 8:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 8;
            return 39;
         }
         if ((active0 & 0x200000000L) != 0L)
            return 39;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 88);
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000L);
      case 34:
         return jjStopAtPos(0, 87);
      case 40:
         return jjStopAtPos(0, 80);
      case 41:
         return jjStopAtPos(0, 81);
      case 42:
         return jjStopAtPos(0, 82);
      case 43:
         return jjStopAtPos(0, 84);
      case 44:
         return jjStopAtPos(0, 73);
      case 45:
         return jjStartNfaWithStates_0(0, 85, 0);
      case 47:
         return jjStartNfaWithStates_0(0, 83, 3);
      case 58:
         return jjStopAtPos(0, 72);
      case 60:
         jjmatchedKind = 74;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800L);
      case 61:
         return jjStopAtPos(0, 78);
      case 62:
         jjmatchedKind = 76;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000L);
      case 63:
         return jjStopAtPos(0, 86);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x11000000000003c0L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0xc00L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x200001000L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x400006000L, 0x1L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x40002000018000L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x0L);
      case 72:
      case 104:
         jjmatchedKind = 39;
         return jjMoveStringLiteralDfa1_0(0x4000040000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x800080000L, 0x0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0xc20000000100000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0xf0000e00000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x280100003000000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x8000000004000000L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x4000000018000000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x2003e00060000000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x0L);
      case 88:
      case 120:
         return jjStartNfaWithStates_0(0, 50, 39);
      case 89:
      case 121:
         return jjStartNfaWithStates_0(0, 51, 39);
      case 90:
      case 122:
         return jjStartNfaWithStates_0(0, 52, 39);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(1, 75);
         else if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         else if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2a0011401240000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x2042604020402400L, active1, 0x1L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x300000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x10200280c000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x800080040L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000c0084101000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x10030000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 41, 39);
         return jjMoveStringLiteralDfa2_0(active0, 0x100L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x1800000000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1c00000040000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L, active1, 0L);
      case 89:
      case 121:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(1, 11, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0xa00200000000L, active1, 0L);
      case 66:
      case 98:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 54, 39);
         break;
      case 67:
      case 99:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 39);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 46, 39);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(2, 64, 39);
         break;
      case 68:
      case 100:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 6, 39);
         return jjMoveStringLiteralDfa3_0(active0, 0x810000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1002100000000L, active1, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0L);
      case 71:
      case 103:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 9, 39);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 60, 39);
         return jjMoveStringLiteralDfa3_0(active0, 0xc0000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L, active1, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L, active1, 0L);
      case 76:
      case 108:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 59, 39);
         return jjMoveStringLiteralDfa3_0(active0, 0x4020000000L, active1, 0L);
      case 77:
      case 109:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 30, 39);
         break;
      case 78:
      case 110:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 53, 39);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 58, 39);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x30000L, active1, 0L);
      case 80:
      case 112:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 31, 39);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 61, 39);
         break;
      case 82:
      case 114:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 55, 39);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 56, 39);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000008000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x206000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 26, 39);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 49, 39);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 62, 39);
         return jjMoveStringLiteralDfa3_0(active0, 0x10400000400L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L, active1, 0L);
      case 86:
      case 118:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 63, 39);
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L, active1, 0L);
      case 88:
      case 120:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 24, 39);
         break;
      case 89:
      case 121:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 57, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L);
      case 67:
      case 99:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 39);
         break;
      case 69:
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 39);
         return jjMoveStringLiteralDfa4_0(active0, 0x10830080000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000040000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x3000000000L);
      case 77:
      case 109:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 39);
         break;
      case 78:
      case 110:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 39);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L);
      case 80:
      case 112:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 39);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 39);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x200300000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 84:
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 39);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 39);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000004000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x200020000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L);
      case 69:
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 39);
         return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000004000L);
      case 78:
      case 110:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 39);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 80:
      case 112:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 39);
         break;
      case 82:
      case 114:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 39);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 39);
         break;
      case 83:
      case 115:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 39);
         return jjMoveStringLiteralDfa5_0(active0, 0x10400000000L);
      case 84:
      case 116:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 12, 39);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 15, 39);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L);
      case 88:
      case 120:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L);
      case 71:
      case 103:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 39);
         break;
      case 72:
      case 104:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 39);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L);
      case 83:
      case 115:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 37, 39);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L);
      case 84:
      case 116:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 29, 39);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 39);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 39);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
      case 78:
      case 110:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 10, 39);
         break;
      case 84:
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 36, 39);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 80:
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000L);
      case 84:
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(7, 14, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000L);
      case 69:
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(8, 33, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(9, 34, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 39;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAddStates(0, 6);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 46)
                     jjCheckNAdd(11);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 39:
               case 22:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAdd(22);
                  break;
               case 0:
                  if (curChar != 45)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 4:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 5:
                  if (curChar == 42)
                     jjCheckNAddStates(10, 12);
                  break;
               case 6:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(7, 5);
                  break;
               case 7:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(7, 5);
                  break;
               case 8:
                  if (curChar == 47 && kind > 5)
                     kind = 5;
                  break;
               case 9:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 10:
                  if (curChar == 46)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAddTwoStates(11, 12);
                  break;
               case 13:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(14);
                  break;
               case 15:
                  if (curChar == 39)
                     jjCheckNAddStates(7, 9);
                  break;
               case 16:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 17:
                  if (curChar == 39)
                     jjCheckNAddStates(13, 15);
                  break;
               case 18:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 20:
                  if (curChar == 39 && kind > 68)
                     kind = 68;
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAddStates(0, 6);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(24);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(25, 26);
                  break;
               case 26:
                  if (curChar == 46)
                     jjCheckNAdd(27);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAddTwoStates(27, 28);
                  break;
               case 29:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(30);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(30);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 33:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(34);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(34);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAddTwoStates(35, 36);
                  break;
               case 37:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(38);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(38);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 21:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAddTwoStates(21, 22);
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                     jjCheckNAdd(22);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  break;
               case 1:
                  if (kind > 4)
                     kind = 4;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  jjCheckNAddTwoStates(4, 5);
                  break;
               case 6:
               case 7:
                  jjCheckNAddTwoStates(7, 5);
                  break;
               case 12:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(16, 17);
                  break;
               case 16:
                  jjCheckNAddStates(7, 9);
                  break;
               case 19:
                  jjCheckNAddStates(13, 15);
                  break;
               case 22:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAdd(22);
                  break;
               case 28:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(18, 19);
                  break;
               case 32:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(20, 21);
                  break;
               case 36:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(22, 23);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 6:
               case 7:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(7, 5);
                  break;
               case 16:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(7, 9);
                  break;
               case 19:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(13, 15);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 39 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   24, 25, 26, 31, 32, 35, 36, 16, 18, 20, 5, 6, 8, 18, 19, 20, 
   13, 14, 29, 30, 33, 34, 37, 38, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, "\72", "\54", "\74", "\74\75", "\76", "\76\75", "\75", "\41\75", 
"\50", "\51", "\52", "\57", "\53", "\55", "\77", "\42", "\12", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffc1L, 0x1ffff37L, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[39];
private final int[] jjstateSet = new int[78];
protected char curChar;
/** Constructor. */
public SQLParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public SQLParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 39; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002200L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
